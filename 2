import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import DataLoader
from torchvision import transforms, datasets
from transformers import ViTForImageClassification
from sklearn.metrics import classification_report, confusion_matrix
import numpy as np
import sys

# Force output to flush immediately
sys.stdout.reconfigure(line_buffering=True)

# 1. 환경 설정
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
batch_size = 32
num_epochs = 1 # 3 정도가 적당할 거 같았는데 시간적 이유로 일단 1에서 성능 평가를 해보기로..
learning_rate = 3e-5

def main():
    print("[INFO] Starting training process...")
    # 2. 데이터 전처리 및 로드
    transform = transforms.Compose([
        transforms.Resize((224, 224)),
        transforms.ToTensor(),
        transforms.Normalize(mean=[0.5, 0.5, 0.5], std=[0.5, 0.5, 0.5])
    ])
    train_dataset = datasets.CIFAR10(root='./data', train=True, download=True, transform=transform)
    test_dataset  = datasets.CIFAR10(root='./data', train=False, download=True, transform=transform)
    train_loader  = DataLoader(train_dataset, batch_size=batch_size, shuffle=True, num_workers=0)
    test_loader   = DataLoader(test_dataset,  batch_size=batch_size, shuffle=False, num_workers=0)

    # 3. 모델 불러오기 및 수정
    model = ViTForImageClassification.from_pretrained(
        'google/vit-base-patch16-224',
        ignore_mismatched_sizes=True
    )
    model.classifier = nn.Linear(model.config.hidden_size, 10)
    model.to(device)

    # 4. 손실 함수 및 옵티마이저
    criterion = nn.CrossEntropyLoss()
    optimizer = optim.AdamW(model.parameters(), lr=learning_rate)

    # 5. 학습 루프
    for epoch in range(num_epochs):
        print(f"[INFO] Epoch {epoch+1}/{num_epochs}")
        model.train()
        total_loss = 0
        for i, (images, labels) in enumerate(train_loader):
            images, labels = images.to(device), labels.to(device)
            outputs = model(pixel_values=images).logits
            loss = criterion(outputs, labels)
            optimizer.zero_grad()
            loss.backward()
            optimizer.step()
            total_loss += loss.item()

            if i % 100 == 0:
                print(f"[INFO] Iteration {i}/{len(train_loader)}, Loss: {loss.item():.4f}")

        avg_loss = total_loss / len(train_loader)
        print(f"[INFO] Average Loss: {avg_loss:.4f}")

        # 평가 루프
        model.eval()
        correct = 0
        total = 0
        all_preds = []
        all_labels = []
        with torch.no_grad():
            for images, labels in test_loader:
                images, labels = images.to(device), labels.to(device)
                outputs = model(pixel_values=images).logits
                preds = outputs.argmax(dim=1)
                correct += (preds == labels).sum().item()
                total += labels.size(0)
                all_preds.extend(preds.cpu().numpy())
                all_labels.extend(labels.cpu().numpy())

        acc = correct / total
        print(f"[INFO] Validation Accuracy: {acc*100:.2f}%")

    # 최종 리포트 출력
    print("\n[INFO] Training complete. Generating report...")
    print("Classification Report:")
    print(classification_report(all_labels, all_preds, digits=4))
    print("Confusion Matrix:")
    print(confusion_matrix(all_labels, all_preds))

if __name__ == '__main__':
    main()

